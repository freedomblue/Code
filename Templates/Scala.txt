
import java.util.Scanner;
import java.awt.geom.Line2D;

object Main{
    def Abs(input: Double): Double = {
        if ( input <= 0 )
            return -input;
        else
            return input;
    } // Abs()
    
    def Triarea( p1x:Double, p1y:Double, p2x:Double, p2y:Double, p3x:Double, p3y:Double ) : Double = {
        val count = 0.5 * Abs( ( ( p2x - p1x )*( p3y - p1y ) - ( p3x - p1x )*( p2y - p1y ) ) );
        return  count;
    } // Triarea()
    
    def Tri2intri1( tri1x:Array[Double], tri1y:Array[Double], tri2x:Array[Double], tri2y:Array[Double] ) : Boolean = {
        val total = Triarea( tri1x(0), tri1y(0), tri1x(1), tri1y(1), tri1x(2), tri1y(2) ) ;
        for ( i <- 0 to 2 ) {
            val area1 = Triarea( tri2x(i), tri2y(i), tri1x(1), tri1y(1), tri1x(2), tri1y(2) ) ;
            val area2 = Triarea( tri1x(0), tri1y(0), tri2x(i), tri2y(i), tri1x(2), tri1y(2) ) ;
            val area3 = Triarea( tri1x(0), tri1y(0), tri1x(1), tri1y(1), tri2x(i), tri2y(i) ) ;
            
            if ( total != area1 + area2 + area3 )
                return false;
        } // for
        
        return true;
    } // Tri2intri1()
	
    def main(args: Array[String]) = {
        var cin = new Scanner(System.in);
        var input = cin.nextLine();
        var buffer = input.split(" ");
        var tri1x = new Array[Double](3);
        var tri1y = new Array[Double](3);
        for ( i <- 0 to 2 ) {
        	var buffer2 = buffer(i).split(",");
        	tri1x(i) = buffer2(0).toDouble;
        	tri1y(i) = buffer2(1).toDouble;
        } // for
        
        input = cin.nextLine();
        buffer = input.split(" ");
        var tri2x = new Array[Double](3);
        var tri2y = new Array[Double](3);
        for ( i <- 0 to 2 ) {
        	var buffer2 = buffer(i).split(",");
        	tri2x(i) = buffer2(0).toDouble;
        	tri2y(i) = buffer2(1).toDouble;
        } // for
        
        var cross = false;
        for ( i <- 0 to 2 if cross == false ) {
            for ( p <- 0 to 2 if cross == false ) {
                val line1 = new Line2D.Double(tri1x(i), tri1y(i), tri1x((i+1)%3), tri1y((i+1)%3));
                val line2 = new Line2D.Double(tri2x(p), tri2y(p), tri2x((p+1)%3), tri2y((p+1)%3));
                if ( line1.intersectsLine(line2) )
                    cross = true;
            } // for
        } // for
        
        if ( cross )
            println("cross")
        else {
            if ( Tri2intri1( tri1x, tri1y, tri2x, tri2y ) || Tri2intri1( tri2x, tri2y, tri1x, tri1y )  )
                println("inside")
            else
                println("outside")
        } // else
        
    } // main()
}
